datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Store {
  id String @id @default(uuid())
  name String 
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[] @relation("StoreToCategory")
  sizes Size[] @relation("StoreToSize")
  colors Color[] @relation("StoreToColor")
  products Product[] @relation("StoreToProduct")
  orders Order[] @relation("StoreToOrder")
}

model Billboard {
  id String @id @default(uuid())
  storeId String
  label String
  imageUrl String

  store Store @relation("StoreToBillboard", fields: [storeId], references: [id])

  categories Category[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@index([storeId])
}

model Category {
  id String @id @default(uuid())
  storeId String
  billboardId String
  name String

  store Store @relation("StoreToCategory", fields: [storeId], references: [id])
  billboard Billboard @relation(fields: [billboardId], references: [id])
  products Product[] @relation("CategoryToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id String @id @default(uuid())
  storeId String
  name String
  value String

  store Store @relation("StoreToSize", fields: [storeId], references: [id])

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Color {
  id String @id @default(uuid())
  storeId String
  name String
  value String

  store Store @relation("StoreToColor", fields: [storeId], references: [id])

  products Product[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Product {
  id String @id @default(uuid())
  storeId String
  categoryId String
  name String
  price Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  sizeId String
  colorId String

  store Store @relation("StoreToProduct", fields: [storeId], references: [id])
  category Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  size Size @relation(fields: [sizeId], references: [id])
  color Color @relation(fields: [colorId], references: [id])

  images Image[]
  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id String @id @default(uuid())
  productId String
  url String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id String @id @default(uuid())
  storeId String
  isPaid Boolean @default(false)
  phone String @default("")
  address String @default("")

  store Store @relation("StoreToOrder", fields: [storeId], references: [id])

  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model OrderItem {
  id String @id @default(uuid())
  orderId String
  productId String

  order Order @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}